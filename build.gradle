import javax.swing.text.html.HTML

plugins {
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'groovy'
	id 'jacoco'
	id 'application'
	id 'war'
}

group = 'ChronicPatientHealthApp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
}

dependencies {
	
	compile group: 'com.h2database', name: 'h2', version: '1.4.200'
//	testCompile "junit:junit:4.11"
	// implementation 'org.springframework.boot:spring-boot-starter-data-jdbc' //causes conflict - creates duplicate Beans
	/*Google Cloud Storage Library - needed for implicit authentication strategy - for goole service accounts
	 https://cloud.google.com/docs/authentication/getting-started */
	compile 'com.google.cloud:google-cloud-storage:1.108.0'
	//providedCompile - used to say that this is already provided by the servlet container - TomCat
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0' //:3.1.0?//will cause errors if removed
	//Java Mail Dependency
	compile group: 'org.springframework', name: 'spring-context-support', version: '5.2.5.RELEASE'
	compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
//	compile group: 'javax.mail', name: 'com.springsource.javax.mail', version: '1.4.5'
	
	//Groovy
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.6', ext: 'pom'
	//Spock
	compile 'org.spockframework:spock-core:2.0-M1-groovy-2.5'
	compile 'org.spockframework:spock-spring:2.0-M1-groovy-2.5'
	

	//Google Calendar and Oauth2 dependencies
	compile 'com.google.api-client:google-api-client:1.30.5'
	compile group: 'com.google.apis', name: 'google-api-services-calendar', version: 'v3-rev411-1.25.0'
	compile group: 'com.google.oauth-client', name: 'google-oauth-client-java6', version: '1.11.0-beta'
	compile group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: '1.11.0-beta'
	

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	
	//Hamcrest Matchers
	testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
	//Jackson
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'
	//Spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-core'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	//MySQL Connector- provides com.mysql.cj.jdbc.Driver 
	runtime 'mysql:mysql-connector-java'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	// testImplementation 'org.springframework.security:spring-security-test'
}

jacocoTestReport {
	reports {
		html.enabled true
	}
	
	afterEvaluate {
		classDirectories.from = files (classDirectories.files.collect{
			fileTree(dir: it, exclude:[
				'**/*app.PatientHealthApp.config/**',
				'**/*app.PatientHealthApp.addressEnums/**',
				'**/app.PatientHealthApp.domain/**',
				'**/app.PatientHealthApp.formObjects/**',
				'**/app.PatientHealthApp.jsonObjects/**'
				])
		})
	}
}

test {
	useJUnitPlatform()
}
